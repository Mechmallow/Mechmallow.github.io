{"categories":[{"title":"3D打印","uri":"https://mechmallow.github.io/mechmallow/categories/3d%E6%89%93%E5%8D%B0/"},{"title":"Website","uri":"https://mechmallow.github.io/mechmallow/categories/website/"},{"title":"心理","uri":"https://mechmallow.github.io/mechmallow/categories/%E5%BF%83%E7%90%86/"},{"title":"瞎折腾","uri":"https://mechmallow.github.io/mechmallow/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"}],"posts":[{"content":" 前言 点开收藏夹发现已经超过4000条了（互联网仓鼠党），刚好群里有人求资源，索性把常用的Geek站点整理一下做个汇总。\n硬件 先说硬件开发吧，毕竟 “ 无硬件，不maker ”。目前 Maker 社区主流的还是 Arduino 和 Node MCU（ESP 8266等）。\n本栏不收录树莓派相关，因为在我看来树莓派属于 Mini PC，而且资源众多，单独分栏比较好\nNodeMcu \u0026ndash; 像Arduino一样简单的开源可编程固件，还有Wifi哦！\nArduino\nAtmel Corporation\nArduino教程（入门篇）\nArduino中文社区\nArduino Create\ncron-job.org\nFritzing Fritzing\nArduino : Adafruit Industries, Unique \u0026amp; fun DIY electronics and kits\nArduino - Open Source Products for Electronic Projects\nSTM32单片机嵌入式实战教程\nSTM32-学习资源\nHome - STMicroelectronics\n意法半导体STM32/STM8技术社区\nWelcome to GNU ARM Eclipse!\nVeryARM - 嵌入式ARM Linux知识与教程\nEclipse CDT\n嵌入式Linux\nEmutex - ubilinux\n社区 一些主流的创客社区，包含国内的和国外的\n类似于 V2EX 以及 Github 这样的程序员社区没有收录\nHackaday | 全球最大的创客社区\n趣无尽\nDF创客社区-分享创造的喜悦\n中国电子技术论坛 - 最受欢迎电子论坛!\n杜洋工作室 DoYoung Studio\namoBBS 阿莫电子论坛 首页\n嵌入式学习网\nEDN China电子技术设计-电子工程师的设计灵感之源\n各种派 关于树莓派及其衍生版的一些网站，还有一些是做了树莓派适配的开源Linux系统，也包括配套的社区。上一栏的社区也有关于树莓派的子版块。\nRaspberry Pi \nBanana Pro_Banana Pi\nWiringPi\nSparkFun Electronics\nArch Linux ARM\ncodemade.io Projects made with code\nGParted \u0026ndash; A free application for graphically managing disk device partitions\nOne link or QR code to apps on App Store and Google Play\nArduino Shield List\nThe World Famous Index of Arduino | Freeduino Knowledge\nCycling ’74\nArdublock | Arduino的图形开发环境\nLakka - The DIY retro emulation console\nCoder for Raspberry Pi\n树莓派实验室 \n树莓派 - 极客范 - GeekFan.net\n树莓派吧 -|生命不息,折腾不止!\n树莓派创客论坛 | 改变世界的树莓派\nRetroPie - Retro-gaming on the Raspberry Pi\nRecalbox - the micro retro gaming console\nKano Developers \nGeeky Gadgets - Gadgets and Technology News\nFrontPage - Raspbian\nLet me google that for you\nNintendo \nWowWee® - Astonishing Imagination\nMakeUseOf - Technology, Simplified\nNanoPi\nFriendlyElec\nNXEZ \nKano\nStruck.io · Welcome\nXively by LogMeIn: IoT Platform for Connected Devices | Xively\nAdafruit Industries\nInstapush - Instant Notifications for Important Transactions\nBlueZ\nTransmission\narkOS\nRealVNC\nOrange Pi Plus - Orangepi\nThe AxiDraw Drawing Machine\nGeany \nGreenfoot\nBlueJ\nScratch - Imagine, Program, Share\nNode-RED\nSonic Pi \nBeagleBoard.org\nAstro Pi\nPiBot - Raspberry Pi Robot\nHome - Dexter Industries\nErle Robotics\nROS.org | Powering the world\u0026#39;s robots\nI2C Device Library\nBlynk\nEltechs ExaGear Desktop. Run x86 applications on ARM-based devices.\nParrot Project\nOSMC\nFlint OS\nOpenELEC Mediacenter - Home\nKodi | Open Source Home Theater Software\nOctoPrint.org\nwww.xbian.org\nRecalbox - the micro retro gaming console\nRaspberry Pi台灣樹莓派\nRaspberry Pi : Adafruit Industries, Unique \u0026amp; fun DIY electronics and kits\nWolfram + 树莓派项目：用于所有树莓派的 Wolfram 引擎\nRaspberry Pi\u0026#39;s community hub - Hackster.io\nPlex 媒体服务器 - 在您所有设备上的媒体\nTinker Board\nNESPi CASE - Retroflag\n3D打印 thingiverse\nMyminifactory\n科技自媒体 关注科技和数码的一些媒体，大多数没什么深度 Fancy\n科技美学 \nProduct Hunt\nPingWest品玩\n科客，主见不成见\n雷锋网_读懂智能未来\nInfini Studio | 映纷创意\nPardon Our Interruption\n创客星球-你的创造力频道\n触动力-你身边的科技视频百科\nZEALER - 科技生活方式第一站\n雷科技 - 关注智能生活和前沿科技\nMega Tiny Corporation Anti-Gravity Case\n极客基地_最专业的可穿戴式智能设备论坛\n鳐科技 - 原创手机、平板电脑、穿戴设备，科技产品评测\n机甲商城\n爱否商城 - 高品质的二手商城\nHack3rs Monastery\nOSZINE | 发现技术之美 – 技术改变未来\nlittleBits\nModular Robotics\nakabook 3.0 documentation\n很赞\n数码荔枝\n虎嗅网\n安静地脑补 | 精选互联网人关注的视频\n端科技（原爱屁屁）- 关注美好应用和前沿科技\nKnewOne - 分享科技与设计产品，发现更好的生活\nThe Verge\nZAEKE｜知客、让数码更懂你\n众筹平台 各大众筹平台有时会出现一些脑洞设计，可以用来激发灵感\nKickStarter\nGadget Flow - We Curate, You Discover\nCoolThings.com | Cool Stuff, Cool Gadgets, Cool Gifts \u0026amp; Things\nProduct reviews, how-tos, deals and the latest tech news - CNET\nIndiegogo\nMatlab 面向科学计算的MATLAB和Simulink - MathWorks 中国\nMATLAB - 技术计算语言 - MathWorks 中国\nMATLAB中文论坛\nThe Winner\u0026rsquo;s Circle - MathWorks 中国\nMATLAB中国论坛|MATLAB爱好者之家—不仅仅是MATLAB!\nMATLAB技术论坛|Simulink仿真论坛|MATLAB函数百科|MATLAB论坛|Simulink论坛|MATLAB下载|MATLAB教程|专业MATLAB技术交流平台! - Powered by Discuz!\nMATLAB Central Blogs | Get the inside view on MATLAB \u0026amp; Simulink!\nMatlab视频教程-我要自学网\nMatlab基础视频教程全集\n电子设计 PCBWeb - Free PCB Design Software\nPCB知识 | Pads Layout教程网\nEasyEDA -基于浏览器的EDA软件:在线绘制原理图、仿真、PCB制作\n【新提醒】easyeda_easyeda软件-中国人自已的eda工具 - 最好最受欢迎电子论坛!\n电子工程师的在线课堂 - Moore8摩尔吧\nGeek极客天地 极客视界\n极客范 - GeekFan.net\n极客迷 — DIY学习与分享社区\n爱极客 科技+汽车视频网站-分享最新最热原创视频-首页 - Powered by Discuz!\n极客 - FreeBuf.COM | 关注黑客与极客\n极客网 | 一站式极客信息分享与智能产品导购平台- FromGeek.com\n发现产品的价值 | 极客公园\n系统极客 • 专注于操作系统及软件使用教程的技术极客网站\n爱板网 \n科技爱好者博客 | 科技改变世界\nYeelink - 连接世界到云端，专注物联网云服务\nFarnell element14 | Electronic Component Distributors\nrdesktop: A Remote Desktop Protocol Client\n开源飞控 Crazepony四轴飞行器\nCrazepony开源四轴飞行器\nMakerfire\n大疆创新官网 \n匿名科创 ANO TC - 打造中国最好的开源飞控\nOpenEdv-开源电子网\n匿名科创-交流论坛 - Powered by Discuz!\n开源小四轴介绍（转） | ExBot易科机器人实验室\nMultiWii\n模型中国\nGoPro Official Website \n8Ber无人机社区\n新华网无人机\nAPM飞控/Pixhawk飞控 - 开源飞控讨论\nBitcraze\nMikroKopter • Universelle UAV Lösung\nTiny Whoop\n创之群媒体平台\nDronecode\nAPM\nFlying Evaluation | Test the flying performance of your MultiCopter\nArduCopter SIM\nCommunity: — ArduPilot documentation\nAerial Sports – First-Person Drone Racing\nArdupilot\n喵呜实验室\nNFC Near Field Communication\nNFC Forum \nNFC World\nNFC之家\n企业官网 MediaTek联发科\nARM官网\nQualcomm高通\nGNU\n开源物联网 Fing\nmbed\nHome Assistant\nAn open source ecosystem for IoT development · PlatformIO\n","id":0,"section":"posts","summary":"前言 点开收藏夹发现已经超过4000条了（互联网仓鼠党），刚好群里有人求资源，索性把常用的Geek站点整理一下做个汇总。 硬件 先说硬件开发吧，毕","tags":["Geek"],"title":"Geek网站推荐","uri":"https://mechmallow.github.io/mechmallow/2020/03/015geek%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/","year":"2020"},{"content":" 在线工具/轻量级应用 前言 最近入手了一台2014款ThinkPad X1 Carbon。不得不说ThinkPad的使用体验非常优秀，美中不足的是CPU性能比较捉急，再一个就是固态硬盘只有240G。因此我搜罗了一些比较常用且自己觉得比较好用的在线/轻量级工具。（长期更新） 值得一提的是，部分应用对于2K及以上的高分辨率屏幕支持欠佳，我会特别注明。\n轻量级应用 这一分类下实际上包含两种截然不同的应用类型。一种是主流生产力工具（adobe全家桶，VS之类）的轻量级替代，另一种是对于某种刚需的解决方案（视频播放器，BT下载等）———只是凑巧比较轻量化。二者的界限比较模糊，所以就不做区分了。\n此外，这里的“轻量化”，指的是体积小于500MB。\nVS Code 提到开发工具绕不开的就是VS Code，可以说是目前最棒的文本编辑器了（别跟我说你还在用notepad++）。此外安装插件之后完全可以作为轻量化IDE使用，基本上可以告别几十个G的VS，美滋滋。\nqbitorrent 在正版体验愈发糟糕的今天，BT下载工具可以说是刚需了（手动狗头）。由于被国内无良企业收购，老牌工具μtorrent晚节不保，qbitorrent可以说是最完美的替代品。\nMicrosoft Edge Chromium 浏览器作为互联网门户，重要性不言而喻。在IE，Edge之后，微软爸爸这么多年终于想开了，果然科技以换壳为本。新版Edge继承了Chromium的优良基因，外加完善的微软配套服务，对于大陆用户极为友好。更别提还支持Chrome插件了，一个字，香！\nAvidemux 视频剪辑软件大多体积巨大且依赖性能，但是如果把剪辑拆开成剪切和编辑，问题就迎刃而解了。Avidemux是一个轻量化的无损视频剪切软件，不经过二次编码直接复制原有视频流本身，真正意义上的无损。剪切后使用FFmpeg拼接就可以实现轻量化的视频剪辑功能了。考虑到FFmpeg没有酷炫的转场效果，你也可以使用Windows10自带的视频编辑器。可惜没找到官网，只能从下载站下载。\n轻量图片处理工具 单独做一个合集也是没办法的事情，毕竟图像处理的需求比视频多得多。下面推荐的小工具有类似PhotoShop一样大而全的，也有专精某一特定功能的小工具。懒得添小标题了，一次写完算了，图像处理工具嘛，大同小异没什么可点评的。 大而全的PS替代主要就三个，[Fotor]()，[StylePix]()，[Gimp]()，UI美观程度依次递减。 特定功能的最常用的是放大工具Waifu2x。\nRufus 烧录启动盘的工具，很小很好用。\n在线工具 在线工具的好处在于免安装，有网即用。可以极大程度的节省本地空间。\nCoggle - 思维导图 Coggle是一个巨tm好看的思维导图工具，远胜Xmind之流。可惜免费用户在线存储只有三张图。\ndraw.io - 流程图 流程图绘制网站，功能极为强大，除了流程图，你甚至还可以画电路图以及液压管路示例图。\nasciiflow - 字符流程图 使用ASCII字符组成的流程图，很适合程序逻辑展示。\nwordart - 词云图 在线生成词云图，很适合做封面。\nvoxelize-image - 3D像素图 点进去看示例吧，很难描述，主要是我懒得截图了。\nphotopea - 在线PS 访问速度比较慢，建议爬梯。\npixlr - 在线PS 上面那个打不开就用这个吧，大同小异。\n","id":1,"section":"posts","summary":"在线工具/轻量级应用 前言 最近入手了一台2014款ThinkPad X1 Carbon。不得不说ThinkPad的使用体验非常优秀，美中不足的是CP","tags":["效率工具"],"title":"在线/轻量级工具推荐【不定期更新】","uri":"https://mechmallow.github.io/mechmallow/2020/02/013%E5%AE%9E%E7%94%A8%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/","year":"2020"},{"content":" 前言 工欲善其事，必先利其器。在刚上大学的时候正好赶上机械键盘的热潮，当时机械键盘刚刚兴起，价格也相对昂贵，基本上在一个轴一块的水平。由于囊中羞涩，咱不得不成为垃圾佬，经常上一些垃圾车拆轴或是修复主板后使用，因此积累了一些小小的经验。后来因为参加比赛手头逐渐宽裕，入了客制化键盘的大坑。入坑后经过漫长的纠结最后选择了XD75作为主力键盘，经过一晚的组装之后这块键盘一直陪我到今天。\n什么是客制化 按照百度百科的说法\n 客制化（customize），就是“定制化”的另一种翻译，相当于“自定义”。客制化词源于港台，大陆不经常使用。 \u0026ldquo;客制化\u0026rdquo;——个性化的一种服务；customize (v.)/customization (n.)；英文简写：UDM 表示根据客户的需求进行特别的定制，以满足其需要。针对顾客的需求,对一个标准的产品进行改变、用新的部件替换标准的部件、或是在一个标准产品中加入特殊的功能，提供顾客一个更完整的产品组合。简单的说，就是客户需要怎么样 厂家商家就怎么样生产制造。 通俗来讲，客制化有点像是“私人定制”，可能是出于习惯原因才导致键圈使用客制化这一称呼。\n 落实到键盘上，客制化指的是自行选键盘的每个部分的配件自行组装，类似于DIY电脑。键盘整体也分为键帽、轴、PCB和外壳几大部分，而最核心的部件就是PCB了，决定了键盘的大小以及整体布局。\n我们日常见到的键盘大多是全尺寸104键，但是使用中顶部F功能区、小键盘以及方向键上方9键使用频率较低，去掉这些之后就是客制化领域最常见的60%尺寸，兼具了实用性、美观性以及便携性。除此以外还有精简了数字键的40%，以及介于60%和104之间的80%，相对比较少见。\n为什么选择XD75 键盘源自机械式打字机，为了避免机械结构卡死引入了很多反人类设计，例如互相错开的键位以及QWERTY排列。QWERTY涉及到使用习惯已经很难更改了，但是错层排列完全可以得到纠正，键盘本就应该排列的整整齐齐，这就是Planck配列。而XD75，就是极其少见的引入了Planck配列的60%键盘。\nPlanck配列的最大优势就是好看，键帽工工整整的码在键盘上，横平竖直，赏心悦目。除此以外，Planck配列在键位设置上有很大的自由度，搭配2x的DSA键帽，可以随心所欲的布置大键的位置，无需卫星轴。\n使用体验 由于Planck配列相对紧凑，因此相较于普通的60%键盘可以塞进更多的键，尤其是delete和方向键，使用起来残缺感相对不那么明显。除此以外，得益于Planck配列规整的排列，涉及到大量数字输入时可以切换到其他层的小键盘，可以很好还原小键盘区的输入体验。\n在良好输入体验的基础上，XD75的游戏体验也极为优秀。整整齐齐的WASD明显比错位的WASD更为自然，同时与数字区的互动也更为精准，这对于FPS游戏而言是很明显的提升（妈妈再也不用担心我切错枪了）。\n总而言之，当拥有一把完全符合自己习惯的客制化键盘之后，切换回正常的键盘就成为了一件很痛苦的事情。而这正是一件优秀的产品所具有的特质，使用它时并没有多么惊艳的感觉，而当你失去它时，才会意识到它的种种优点。\n完结撒花！\n","id":2,"section":"posts","summary":"前言 工欲善其事，必先利其器。在刚上大学的时候正好赶上机械键盘的热潮，当时机械键盘刚刚兴起，价格也相对昂贵，基本上在一个轴一块的水平。由于囊中","tags":["键盘"],"title":"DIY自己专属的键盘","uri":"https://mechmallow.github.io/mechmallow/2019/11/012diy%E5%AE%A2%E5%88%B6%E5%8C%96%E9%94%AE%E7%9B%98/","year":"2019"},{"content":" 抽卡沉船引起的一些思考 开门见山 塔防手游《明日方舟》19年5月开始公测，我就是那个时候入坑的。和其他日系抽卡手游一样，角色是要概率抽取的，六星（SSR）概率为2%，在计算保底后抽到六星的数学期望是36.5抽。本文写作的初衷就是我在某个卡池里里沉船了。现在回想起抽卡的过程，简直如同狂热的赌徒一般，一次次增添筹码直到输的血本无归。我一直自认为行事风格还算理智，因此十分好奇究竟是什么样的心理陷阱使我在抽卡的时候丧心病狂（笑）。很快我就找到了答案——斯金纳老鼠理论。\n关于斯金纳的老鼠 斯金纳老鼠是一种小型啮齿动物，生活在实验室环境中，它的天敌是薛定谔的猫（大雾）\n言归正传，首先解释一下斯金纳是谁。\n 伯尔赫斯·弗雷德里克·斯金纳（Burrhus Frederic Skinner，1904-1990），美国心理学家，新行为主义学习理论的创始人，也是新行为主义的主要代表。\n——百度百科\n 和薛定谔的假想猫不同，斯金纳的老鼠指的是斯金纳进行一系列实验所使用的老鼠，它（至少曾经）是真实存在的。\n那么斯金纳究竟利用老鼠做了什么实验呢？\n事情是这样的，斯金纳为研究动物的条件反射，设计了两个箱子，两个箱子都有按钮，一个按下去有食物掉落，一个按下去会通电，结果我估计学过巴普洛夫的狗的理论的人都能猜到，A箱子里的老鼠学会了按按钮(有食物，是奖励)，B箱子的老鼠则不碰按钮(会被电，是惩罚)。这就是操作性条件反射。\n到这一步为止，实验平平淡淡，似乎只是巴甫洛夫实验的换壳版本，然而有趣的事情才刚刚开始。\n斯金纳又设计了第二个实验，也是AB两个箱子， A箱子按一次就有食物掉落，概率为百分百， B箱子食物随机掉落，概率不定。 结果是，B箱子里的老鼠到了后面疯狂的按按钮，根本停不下来。\n为什么B老鼠会变成这样？答案简单得不能再简单了，A老鼠，按一次就会有食物，所以它理解到这是一个稳定的，安全的行为，于是乎能够控制自己，而对于B老鼠而言，按按钮会有两个不同结果，要么有食物要么没有。没有食物，会产生强烈的焦躁不安的情绪，而如果食物掉落下来了，这时候B老鼠脑内会瞬间分泌大量的多巴胺，让焦躁的情绪得到缓解，于是乎，它接下来会疯狂的痴迷于按按钮的行为，然后下一次随机掉落，会又强化他的按按钮行为，如此往复，成了一个恶性循环。\n好像我就是那只老鼠 抽卡和盲盒，就是这个实验的翻版，人是老鼠，稀有卡或者盲盒里的某些款式是奖励，而随机性就是导致上瘾行为产生的强化剂。\n到了这里似乎一切都说得通了，不过还有更好玩的。\n斯金纳还做了鸽子实验，和老鼠实验类似，奖励是食物，但是他设置的食物分发器每隔15秒就落下食物。就是说，不论鸽子在做什么，每隔15秒就会有食物出现。被试为8只鸽子，连续几天减少喂食量，使它们在测试时处于饥饿状态，从而增强其寻找食物的动机。让每只鸽子都在实验箱待几分钟且不限制其活动。几天后观察记录其行为变化。\n猜猜鸽子会有什么样的变化？ \u0026gt;这8只鸽子其中6只产生了非常明显的迷信行为。一只鸽子形成了逆时针转圈的条件反射，一般在两次强化间转2-3圈；另一只鸽子反复将头伸向箱子上方的一个角落；第三只呈现上举动作，好像将头放到一个看不见的杆下面反复抬起。另外两只鸽子头和身体呈现出了钟摆似的动作，还有一只鸽子形成不完整的啄击行为。\n鸽子认为只要自己做某个特定的动作就能得到食物，仿佛迷信一般。这就相当于我们抽卡抽不到，为了寻找这个所谓的规律，又创造了很多抽卡秘籍之类。(宁可信其有不可信其无)\n拜锦鲤也是类似的，做了=可能有好事发生,其实和赌博也很像。\n那么最后问题来了，人类的本质究竟是什么呢？（手动狗头\n","id":3,"section":"posts","summary":"抽卡沉船引起的一些思考 开门见山 塔防手游《明日方舟》19年5月开始公测，我就是那个时候入坑的。和其他日系抽卡手游一样，角色是要概率抽取的，六星","tags":["人生迷思"],"title":"抽卡沉船引起的一些思考","uri":"https://mechmallow.github.io/mechmallow/2019/07/011%E6%96%AF%E9%87%91%E7%BA%B3%E8%80%81%E9%BC%A0%E7%90%86%E8%AE%BA/","year":"2019"},{"content":" Magisk从入坑到变砖 前言 手机作为最常用的工具在生活中的地位极其重要，而衡量工具好坏的一个重要标准就是是否趁手。苹果由于其封闭的系统生态，安全的同时丧失了很多个性化的空间，而Android虽然可以高度定制，但是由于国内“毒瘤”APP的荼毒，其软件生态不尽如人意。而糟糕的软件生态倒逼手机厂商进行硬件的升级，于是在iPhone旗舰还在使用4G RAM的当下，Android旗舰已经飙到8G乃至12G，而价格依然处在一个相对可以接受的区间。这样一来如何驾驭手上这头性能猛兽自然就是一个亟待解决的问题，靠root？不不不，这太过时了，现在最理想的解决方案是Magisk。\n在此之前我曾经写过一些零碎的Magisk折腾笔记，奈何文笔不精，在少数派推出Magisk系列文章之后，索性直接把链接搬运过来，之后再补充一些零碎的细节作为补充。\n少数派Magisk合集  Magisk 初识与安装\n保留 Magisk 进行「无痛 OTA」\nMagisk Manager 详解\n全局多字重字体\n救砖指南\nMagisk 模块推荐 ①\nMagisk 模块推荐 ②\nMagisk 模块推荐 ③\nMagisk 模块推荐 ④\n打破OEM厂商壁垒\n 以上就是少数派的Magisk教程的合集，祝大家玩机愉快！\n","id":4,"section":"posts","summary":"Magisk从入坑到变砖 前言 手机作为最常用的工具在生活中的地位极其重要，而衡量工具好坏的一个重要标准就是是否趁手。苹果由于其封闭的系统生态，","tags":["效率工具"],"title":"Magisk从入坑到变砖","uri":"https://mechmallow.github.io/mechmallow/2018/10/010magisk%E6%95%99%E7%A8%8B%E5%90%88%E9%9B%86/","year":"2018"},{"content":" M1加密卡破解 这一篇只会简单说一下常见的破解手段，具体如何操作就不说了免得被查水表。\n暴力破解 暴力破解是破解工作永远的话题，只要你拥有庞大的计算资源，管你什么密码都能破解。而且，在 CRYPTO1 算法的细节没有被泄露之前，最有效的方法就是暴破了。还有一个很重要的原因就是，M1 卡是被动卡，需要读卡器为它提供能量，一旦读卡器切断了电源，卡中的临时数据就会丢失，这样就没有办法记录下攻击者究竟输错了多少次密码，卡永远不会因为密码输入错误太多而被锁定，只要攻击者有时间慢慢跟它耗，密码肯定会出来的。\n列举一些常见的 M1 卡密钥\nFFFFFFFFFFFF A0A1A2A3A4A5 D3F7D3F7D3F7 000000000000 A0B0C0D0E0F0 A1B1C1D1E1F1 B0B1B2B3B4B5 4D3A99C351DD 1A982C7E459A AABBCCDDEEFF B5FF67CBA951 714C5C886E97 587EE5F9350F A0478CC39091 533CB6C723F6 24020000DBFD 000012ED12ED 8FD0A4F256E9 EE9BD361B01B  重放攻击 重放攻击是基于 M1 卡的 PRNG 算法漏洞实现的，当卡接近读卡器获得能量的时候，就会开始生成随机数序列，但这有一个问题，因为卡是被动式卡，本身自己不带电源，所以断电后数据没办法保存，这时基于 LSRF 的 PRNG 算法缺陷就出来了，每次断电后再重新接入电，卡就会生成一摸一样的随机数序列，所以我们就有可能把这个序列计算出来，所以只有我们控制好时间，就能够知道在获得能量后的某一刻时间的随机数是多少，然后进行重放攻击，就有可能篡改正常的数据。如果卡的所有权在我们手上的时候，我们甚至不需要浪费太多的时间就可以实现。\n克隆卡片 这是一个很简单也很实用的方法，因为M1卡自带扇区可以保存数据，所以大部分的卡片会选择加密扇区后将数据保存在里面，所以我们完全可以克隆一张带有一样数据的克隆卡。这就会用到一种叫 UID 卡的特殊 M1 模拟卡，前面说到每张 M1 卡在 0 扇区第 1 段都会有一个全球唯一的 UID 编号，而且这个块在出厂之后是被厂商设定保护无法修改的，UID 卡就是没有设定 0 扇区保护的卡，所以你可以随意的修改你想要的 UID，这样我们就可以克隆出一张连 UID 都相同的卡片了。\n密钥流窃听 利用神器 Proxmark 3 可以嗅探到全部扇区都加密的 M1 卡，在卡和已经授权的读卡器交换数据的时候进行窃听，就能把 tag 数据读取出来，利用 XOR 算 Key 工具就可以把扇区的密钥计算出来，这也是 PRNG 算法的漏洞所导致的。\n验证漏洞 验证漏洞是目前使用最多的M1破解手段，在读卡器尝试去读取一个扇区时，卡会首先发一个随机数给读卡器，读卡器接到随机数之后利用自身的算法加密这个随机数再反馈回给卡，卡再用自己的算法计算一次，发现结果一致的话就认为读卡器是授权了的，然后就用开始自己的算法加密会话并跟读卡器进行传送数据。这时候问题就来了，当我们再次尝试去访问另一个扇区，卡片又会重复刚才那几个步骤，但此时卡跟读卡器之间的数据交换已经是被算法加密了的，而这个算法又是由扇区的密钥决定的，所以密钥就被泄露出来了。因此验证漏洞要求我们至少知道一个扇区的密钥，但目前大部分的扇区都没有全部加密，所以很容易就会被破解。\n总结 破解 M1 卡当然不仅仅只有这几种方法，但对于我们来说已经足够了，目前国内 80% 的 IC 卡都是 M1 卡，例如门禁卡，饭卡，智能电卡之类的。但是！千万不要用这种技术去做违法的事情，后果自负！\n","id":5,"section":"posts","summary":"M1加密卡破解 这一篇只会简单说一下常见的破解手段，具体如何操作就不说了免得被查水表。 暴力破解 暴力破解是破解工作永远的话题，只要你拥有庞大的计","tags":["NFC"],"title":"M1加密卡破解","uri":"https://mechmallow.github.io/mechmallow/2018/04/008m1%E5%8A%A0%E5%AF%86%E5%8D%A1%E7%A0%B4%E8%A7%A3/","year":"2018"},{"content":" 前言 不知不觉就鸽了好几个月，主要还是过年事情太多了（其实主要是我懒）。\n在上一篇中简单介绍了一下M1卡以及复制流程，但是，不加密的M1卡还是比较少见的，今天我们就详细研究一下M1卡的加密机制。 首先放上[官方手册]()，有手册好办事。\nM1卡的控制码 我们先说上一篇提到的位于0扇区3块中间8位的控制码。实际上，Mifare卡的每一个扇区都是独立的，每一个扇区的3块都用来存储本扇区密码以及进行存取控制，可以根据需求灵活设定。 密码之前已经说过了是3块的前后12位，这里不再赘述（其实又说了一遍Orz，不过我就是要水字数不服来打我呀略略略）。这里着重说一下存取控制。\n存取控制的机制是这样的。中间的8位16进制数字，以最常见的 FF 07 80 69 为例。每两个数字对应一个字节，也就是8位二进制数字，其中最后一个字节不怎么用。首先转换成二进制。\nFF = 11111111 07 = 00000111 80 = 10000000  然后填入存取控制表中。（下表中_b代表取反）\n| 字节6 | C23_b | C22_b | C21_b | C20_b | C13_b | C12_b | C11_b | C10_b | | | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | | 字节7 | C13 | C12 | C11 | C10 | C33_b | C32_b | C31_b | C30_b | | | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | | 字节8 | C33 | C32 | C31 | C30 | C23 | C22 | C21 | C20 | | | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |  三个控制位以正和反两种形式存在于存取控制字节中，决定了该块的访问权限。因为控制字是由部分控制位取反的来的，由上表C33_b就可知道，所以我们要再取反一次获取原来的控制位，就能得出下面的控制位。\nFF = 00000000 07 = 00001000 80 = 10000000  在存取控制中每个块都有相应的三个控制位,定义如下：\n块0： C10 C20 C30 块1： C11 C21 C31 块2： C12 C22 C32 块3： C13 C23 C33  各个控制位对应的二进制数值分别为：\n块0： 0 0 0 块1： 0 0 0 块2： 0 0 0 块3： 0 0 1  三位二进制的含义表在M1英文手册里有，懒得放图了，各位请自己查。 简言之，其中000的含义为，通过A或者B密码认证后可读，可写，可进行加值和减值操作。\n那么问题来了，如果我们要改写厂家的默认控制位自定义自己的控制位要怎么做呢？\n很简单，根据上述步骤逆推就完事了，如果嫌手动逆推麻烦的话有很多自动生成控制位的工具。需要注意的是，如果逆推出错，整出了一个谁都不认识的控制位，那么写入后该卡将永远不可读不可写（卡片自杀）。\n","id":6,"section":"posts","summary":"前言 不知不觉就鸽了好几个月，主要还是过年事情太多了（其实主要是我懒）。 在上一篇中简单介绍了一下M1卡以及复制流程，但是，不加密的M1卡还是比","tags":["NFC"],"title":"深入了解M1加密卡","uri":"https://mechmallow.github.io/mechmallow/2018/03/007m1%E5%8A%A0%E5%AF%86%E5%8D%A1%E5%AD%98%E5%8F%96%E6%8E%A7%E5%88%B6/","year":"2018"},{"content":" 前言 提前声明，本人为遵纪守法的良民，这篇记录仅供研究之用。\n学校的电子楼统一使用了一卡通门禁，但是配发给我们社团的实验室只允许录一个人的一卡通。一开始我们通过蓝牙+继电器远程短接室内的开关开门（门是电磁铁吸合的），无奈被叫兽得知后勒令拆除（无能校领导管的瞎jb宽彰显存在感系列），由此萌生了复制门禁卡的想法。\n背景知识 经过查阅资料，目前广泛使用的一卡通、门禁卡等普遍采用了NXP的M1卡。\n 所谓的M1芯片，是指菲利浦下属子公司恩智浦出品的芯片缩写，全称为NXP Mifare 1K系列，常用的有S50及S70两种型号，截止到2013年11月4日，已经有国产芯片与其兼容。利用PVC封装M1芯片、感应天线，然后压制成型后而制作的卡即是智能卡行业所说的M1卡，属于非接触式IC卡。非接触式IC卡又称射频卡，成功地解决了无源(卡中无电源)和免接触这一难题，是电子器件领域的一大突破。主要用于公交、轮渡、地铁的自动收费系统，也应用在门禁管理、身份证明和电子钱包。（来自百度百科）\n 最有意思的是，Mifare卡早在2008年就已经被破解了，只是由于成本低廉所以仍在广泛使用。而最近几年火起来的NFC，其采用的芯片大多也是NXP的，也一部分博通的不过执行标准和Mifare卡一样（都是ISO/IEC14443 Type A），可以互相兼容，正是因此手机NFC才能读写/模拟Mifare卡。\nM1卡简介 先说说M1卡的存储结构，M1中的1指的是1K，也就是说卡上存储空间为1KB，卡上分为16个扇区，每个扇区4个区块，每个块16Byte，存储格式为16进制，也就是说每个块有32位16进制数字。 和硬盘一样，M1卡的第一个扇区也就是0扇区比较特殊。\n0扇区0块前8位存的是厂商的UID码，0-2块为存储区块。 3块也很重要，前12位是密钥A（Key A），后12位是密钥B（Key B），中间8位是控制码，这个控制码很重要而且有点复杂一会再说。\n正是由于0扇区的重要性，因此M1卡的0扇区是出厂写死无法修改的。但是由于卡片复制等种种需求，0扇区可写的空白卡片市场上也有流通。这里给出市面上常见卡片的一些介绍。\nUID卡：普通复制卡，可以反复擦写所有扇区，门禁有防火墙则失效。\nCUID：升级复制卡，可以反复擦写所有扇区，可以穿透大部分防火墙。\nFUID：高级复制卡，0扇区只能写入一次，写入后变为M1卡。\nUFUID：超高级复制卡，0扇区只能写入一次，封卡后变为M1卡，不封卡变为UID卡。\n这里的防火墙是防止复制卡盗刷的一种防护手段，之后也会介绍。\n读写工具 卡片到手了，怎么读写呢？\n考虑到现在很多手机都有NFC功能，这里贴上GitHub上的一个开源NFC读写APP，MifareClassicTool，直接下载APP的话戳这里。\n如果你的手机不支持NFC，emmm，同学你该换手机了（逃\n手机不支持NFC的话可以购买USB接口的读卡器插到PC上借助对应的软件进行读写。这里我推荐开源的Proxmark3硬件，鉴于PM3的优秀设计，国内也有很多寨板，大家可以自行选购。\nJust Do It！ 万事俱备，开搞！手机打开MCT读取待复制的目标卡，保存下其区块文件，然后将所有数据原封不动Copy到一张0扇区可写的白卡上即可，收工！ 如果目标卡是未加密的，到这一步就大功告成了，如果是加密卡就需要进行更深♂入的研究，不过现在时间不早了，我会放到下一篇详细讲。\n","id":7,"section":"posts","summary":"前言 提前声明，本人为遵纪守法的良民，这篇记录仅供研究之用。 学校的电子楼统一使用了一卡通门禁，但是配发给我们社团的实验室只允许录一个人的一卡通","tags":["NFC"],"title":"手机NFC与M1卡折腾记录","uri":"https://mechmallow.github.io/mechmallow/2017/12/006nfc-m1/","year":"2017"},{"content":" 前言 谈到单片机必谈传感器，谈到传感器必谈滤波。\n被滤波搞得焦头烂额的时候偶然在社区看到了这篇远古神贴，特此搬运以便后期查阅。\n饮水不忘掘井人，这里是原帖链接。\n限幅滤波法（程序判断滤波法） 方法 根据经验判断，确定两次采样允许的最大偏差值（设为A），\n每次检测到新值时判断：\n如果本次值与上次值之差\u0026lt;=A，则本次值有效，\n如果本次值与上次值之差\u0026gt;A，则本次值无效，放弃本次值，用上次值代替本次值。\n优点： 能有效克服因偶然因素引起的脉冲干扰。\n缺点： 无法抑制周期性的干扰。平滑度差。\nint Filter_Value; int Value; void setup() { Serial.begin(9600); // 初始化串口通信 randomSeed(analogRead(0)); // 产生随机种子 Value = 300; } void loop() { Filter_Value = Filter(); // 获得滤波器输出值 Value = Filter_Value; // 最近一次有效采样的值，该变量为全局变量 Serial.println(Filter_Value); // 串口输出 delay(50); } // 用于随机产生一个300左右的当前值 int Get_AD() { return random(295, 305); } // 限幅滤波法（又称程序判断滤波法） #define FILTER_A 1 int Filter() { int NewValue; NewValue = Get_AD(); if(((NewValue - Value) \u0026gt; FILTER_A) || ((Value - NewValue) \u0026gt; FILTER_A)) return Value; else return NewValue; }  中位值滤波法 方法： 连续采样N次（N取奇数），把N次采样值按大小排列，取中间值为本次有效值。\n优点： 能有效克服因偶然因素引起的波动干扰；\n对温度、液位的变化缓慢的被测参数有良好的滤波效果。\n缺点： 对流量、速度等快速变化的参数不宜。\nint Filter_Value; void setup() { Serial.begin(9600); // 初始化串口通信 randomSeed(analogRead(0)); // 产生随机种子 } void loop() { Filter_Value = Filter(); // 获得滤波器输出值 Serial.println(Filter_Value); // 串口输出 delay(50); } // 用于随机产生一个300左右的当前值 int Get_AD() { return random(295, 305); } // 中位值滤波法 #define FILTER_N 101 int Filter() { int filter_buf[FILTER_N]; int i, j; int filter_temp; for(i = 0; i \u0026lt; FILTER_N; i++) { filter_buf[i] = Get_AD(); delay(1); } // 采样值从小到大排列（冒泡法） for(j = 0; j \u0026lt; FILTER_N - 1; j++) { for(i = 0; i \u0026lt; FILTER_N - 1 - j; i++) { if(filter_buf[i] \u0026gt; filter_buf[i + 1]) { filter_temp = filter_buf[i]; filter_buf[i] = filter_buf[i + 1]; filter_buf[i + 1] = filter_temp; } } } return filter_buf[(FILTER_N - 1) / 2]; }  算术平均滤波法 方法： 连续取N个采样值进行算术平均运算：\nN值较大时：信号平滑度较高，但灵敏度较低；\nN值较小时：信号平滑度较低，但灵敏度较高；\nN值的选取：一般流量，N=12；压力：N=4。\n优点： 适用于对一般具有随机干扰的信号进行滤波；\n这种信号的特点是有一个平均值，信号在某一数值范围附近上下波动。\n缺点： 对于测量速度较慢或要求数据计算速度较快的实时控制不适用；\n比较浪费RAM。\nint Filter_Value; void setup() { Serial.begin(9600); // 初始化串口通信 randomSeed(analogRead(0)); // 产生随机种子 } void loop() { Filter_Value = Filter(); // 获得滤波器输出值 Serial.println(Filter_Value); // 串口输出 delay(50); } // 用于随机产生一个300左右的当前值 int Get_AD() { return random(295, 305); } // 算术平均滤波法 #define FILTER_N 12 int Filter() { int i; int filter_sum = 0; for(i = 0; i \u0026lt; FILTER_N; i++) { filter_sum += Get_AD(); delay(1); } return (int)(filter_sum / FILTER_N); }  递推平均滤波法（滑动平均滤波法） 方法： 把连续取得的N个采样值看成一个队列，队列的长度固定为N，\n每次采样到一个新数据放入队尾，并扔掉原来队首的一次数据（先进先出原则），\n把队列中的N个数据进行算术平均运算，获得新的滤波结果。\nN值的选取：流量，N=12；压力，N=4；液面，N=4-12；温度，N=1-4。\n优点： 对周期性干扰有良好的抑制作用，平滑度高；\n适用于高频振荡的系统。\n缺点： 灵敏度低，对偶然出现的脉冲性干扰的抑制作用较差；\n不易消除由于脉冲干扰所引起的采样值偏差；\n不适用于脉冲干扰比较严重的场合；\n比较浪费RAM。\nint Filter_Value; void setup() { Serial.begin(9600); // 初始化串口通信 randomSeed(analogRead(0)); // 产生随机种子 } void loop() { Filter_Value = Filter(); // 获得滤波器输出值 Serial.println(Filter_Value); // 串口输出 delay(50); } // 用于随机产生一个300左右的当前值 int Get_AD() { return random(295, 305); } // 递推平均滤波法（又称滑动平均滤波法） #define FILTER_N 12 int filter_buf[FILTER_N + 1]; int Filter() { int i; int filter_sum = 0; filter_buf[FILTER_N] = Get_AD(); for(i = 0; i \u0026lt; FILTER_N; i++) { filter_buf[i] = filter_buf[i + 1]; // 所有数据左移，低位仍掉 filter_sum += filter_buf[i]; } return (int)(filter_sum / FILTER_N); }  中位值平均滤波法（防脉冲干扰平均滤波法） 方法： 采一组队列去掉最大值和最小值后取平均值，\n相当于“中位值滤波法”+“算术平均滤波法”。\n连续采样N个数据，去掉一个最大值和一个最小值，\n然后计算N-2个数据的算术平均值。\nN值的选取：3-14。\n优点： 融合了“中位值滤波法”+“算术平均滤波法”两种滤波法的优点。\n对于偶然出现的脉冲性干扰，可消除由其所引起的采样值偏差。\n对周期干扰有良好的抑制作用。\n平滑度高，适于高频振荡的系统。\n缺点： 计算速度较慢，和算术平均滤波法一样。\n比较浪费RAM。\nint Filter_Value; void setup() { Serial.begin(9600); // 初始化串口通信 randomSeed(analogRead(0)); // 产生随机种子 } void loop() { Filter_Value = Filter(); // 获得滤波器输出值 Serial.println(Filter_Value); // 串口输出 delay(50); } // 用于随机产生一个300左右的当前值 int Get_AD() { return random(295, 305); } //算法1 #define FILTER_N 100 int Filter() { int i, j; int filter_temp, filter_sum = 0; int filter_buf[FILTER_N]; for(i = 0; i \u0026lt; FILTER_N; i++) { filter_buf[i] = Get_AD(); delay(1); } // 采样值从小到大排列（冒泡法） for(j = 0; j \u0026lt; FILTER_N - 1; j++) { for(i = 0; i \u0026lt; FILTER_N - 1 - j; i++) { if(filter_buf[i] \u0026gt; filter_buf[i + 1]) { filter_temp = filter_buf[i]; filter_buf[i] = filter_buf[i + 1]; filter_buf[i + 1] = filter_temp; } } } // 去除最大最小极值后求平均 for(i = 1; i \u0026lt; FILTER_N - 1; i++) filter_sum += filter_buf[i]; return filter_sum / (FILTER_N - 2); } //算法2 #define FILTER_N 100 int Filter() { int i; int filter_sum = 0; int filter_max, filter_min; int filter_buf[FILTER_N]; for(i = 0; i \u0026lt; FILTER_N; i++) { filter_buf[i] = Get_AD(); delay(1); } filter_max = filter_buf[0]; filter_min = filter_buf[0]; filter_sum = filter_buf[0]; for(i = FILTER_N - 1; i \u0026gt; 0; i--) { if(filter_buf[i] \u0026gt; filter_max) filter_max=filter_buf[i]; else if(filter_buf[i] \u0026lt; filter_min) filter_min=filter_buf[i]; filter_sum = filter_sum + filter_buf[i]; filter_buf[i] = filter_buf[i - 1]; } i = FILTER_N - 2; filter_sum = filter_sum - filter_max - filter_min + i / 2; // +i/2 的目的是为了四舍五入 filter_sum = filter_sum / i; return filter_sum; }  限幅平均滤波法 方法： 相当于“限幅滤波法”+“递推平均滤波法”；\n每次采样到的新数据先进行限幅处理，\n再送入队列进行递推平均滤波处理。\n优点： 融合了两种滤波法的优点；\n对于偶然出现的脉冲性干扰，可消除由于脉冲干扰所引起的采样值偏差。\n缺点： 比较浪费RAM。\n#define FILTER_N 12 int Filter_Value; int filter_buf[FILTER_N]; void setup() { Serial.begin(9600); // 初始化串口通信 randomSeed(analogRead(0)); // 产生随机种子 filter_buf[FILTER_N - 2] = 300; } void loop() { Filter_Value = Filter(); // 获得滤波器输出值 Serial.println(Filter_Value); // 串口输出 delay(50); } // 用于随机产生一个300左右的当前值 int Get_AD() { return random(295, 305); } // 限幅平均滤波法 #define FILTER_A 1 int Filter() { int i; int filter_sum = 0; filter_buf[FILTER_N - 1] = Get_AD(); if(((filter_buf[FILTER_N - 1] - filter_buf[FILTER_N - 2]) \u0026gt; FILTER_A) || ((filter_buf[FILTER_N - 2] - filter_buf[FILTER_N - 1]) \u0026gt; FILTER_A)) filter_buf[FILTER_N - 1] = filter_buf[FILTER_N - 2]; for(i = 0; i \u0026lt; FILTER_N - 1; i++) { filter_buf[i] = filter_buf[i + 1]; filter_sum += filter_buf[i]; } return (int)filter_sum / (FILTER_N - 1); }  一阶滞后滤波法 方法： 取a=0-1，本次滤波结果=(1-a)*本次采样值+a*上次滤波结果。\n优点： 对周期性干扰具有良好的抑制作用；\n适用于波动频率较高的场合。\n缺点： 相位滞后，灵敏度低；\n滞后程度取决于a值大小；\n不能消除滤波频率高于采样频率1/2的干扰信号。\nint Filter_Value; int Value; void setup() { Serial.begin(9600); // 初始化串口通信 randomSeed(analogRead(0)); // 产生随机种子 Value = 300; } void loop() { Filter_Value = Filter(); // 获得滤波器输出值 Serial.println(Filter_Value); // 串口输出 delay(50); } // 用于随机产生一个300左右的当前值 int Get_AD() { return random(295, 305); } // 一阶滞后滤波法 #define FILTER_A 0.01 int Filter() { int NewValue; NewValue = Get_AD(); Value = (int)((float)NewValue * FILTER_A + (1.0 - FILTER_A) * (float)Value); return Value; }  加权递推平均滤波法 方法： 是对递推平均滤波法的改进，即不同时刻的数据加以不同的权；\n通常越接近现时刻的数据，权取得越大。\n给予新采样值的权系数越大，则灵敏度越高，但信号平滑度越低。\n优点： 适用于有较大纯滞后时间常数的对象，和采样周期较短的系统。\n缺点： 对于纯滞后时间常数较小、采样周期较长、变化缓慢的信号；\n不能迅速反应系统当前所受干扰的严重程度，滤波效果差。\nint Filter_Value; void setup() { Serial.begin(9600); // 初始化串口通信 randomSeed(analogRead(0)); // 产生随机种子 } void loop() { Filter_Value = Filter(); // 获得滤波器输出值 Serial.println(Filter_Value); // 串口输出 delay(50); } // 用于随机产生一个300左右的当前值 int Get_AD() { return random(295, 305); } // 加权递推平均滤波法 #define FILTER_N 12 int coe[FILTER_N] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}; // 加权系数表 int sum_coe = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12; // 加权系数和 int filter_buf[FILTER_N + 1]; int Filter() { int i; int filter_sum = 0; filter_buf[FILTER_N] = Get_AD(); for(i = 0; i \u0026lt; FILTER_N; i++) { filter_buf[i] = filter_buf[i + 1]; // 所有数据左移，低位仍掉 filter_sum += filter_buf[i] * coe[i]; } filter_sum /= sum_coe; return filter_sum; }  消抖滤波法 方法： 设置一个滤波计数器，将每次采样值与当前有效值比较：\n如果采样值=当前有效值，则计数器清零；\n如果采样值\u0026lt;\u0026gt;当前有效值，则计数器+1，并判断计数器是否\u0026gt;=上限N（溢出）；\n如果计数器溢出，则将本次值替换当前有效值，并清计数器。\n优点： 对于变化缓慢的被测参数有较好的滤波效果；\n可避免在临界值附近控制器的反复开/关跳动或显示器上数值抖动。\n缺点： 对于快速变化的参数不宜；\n如果在计数器溢出的那一次采样到的值恰好是干扰值,则会将干扰值当作有效值导入系统。\nint Filter_Value; int Value; void setup() { Serial.begin(9600); // 初始化串口通信 randomSeed(analogRead(0)); // 产生随机种子 Value = 300; } void loop() { Filter_Value = Filter(); // 获得滤波器输出值 Serial.println(Filter_Value); // 串口输出 delay(50); } // 用于随机产生一个300左右的当前值 int Get_AD() { return random(295, 305); } // 消抖滤波法 #define FILTER_N 12 int i = 0; int Filter() { int new_value; new_value = Get_AD(); if(Value != new_value) { i++; if(i \u0026gt; FILTER_N) { i = 0; Value = new_value; } } else i = 0; return Value; }  限幅消抖滤波法 方法： 相当于“限幅滤波法”+“消抖滤波法”；\n先限幅，后消抖。\n优点： 继承了“限幅”和“消抖”的优点；\n改进了“消抖滤波法”中的某些缺陷，避免将干扰值导入系统。\n缺点： 对于快速变化的参数不宜。\nint Filter_Value; int Value; void setup() { Serial.begin(9600); // 初始化串口通信 randomSeed(analogRead(0)); // 产生随机种子 Value = 300; } void loop() { Filter_Value = Filter(); // 获得滤波器输出值 Serial.println(Filter_Value); // 串口输出 delay(50); } // 用于随机产生一个300左右的当前值 int Get_AD() { return random(295, 305); } // 限幅消抖滤波法 #define FILTER_A 1 #define FILTER_N 5 int i = 0; int Filter() { int NewValue; int new_value; NewValue = Get_AD(); if(((NewValue - Value) \u0026gt; FILTER_A) || ((Value - NewValue) \u0026gt; FILTER_A)) new_value = Value; else new_value = NewValue; if(Value != new_value) { i++; if(i \u0026gt; FILTER_N) { i = 0; Value = new_value; } } else i = 0; return Value; }  ","id":8,"section":"posts","summary":"前言 谈到单片机必谈传感器，谈到传感器必谈滤波。 被滤波搞得焦头烂额的时候偶然在社区看到了这篇远古神贴，特此搬运以便后期查阅。 饮水不忘掘井人，这","tags":["算法"],"title":"滤波算法汇总","uri":"https://mechmallow.github.io/mechmallow/2017/10/005%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%BB%A4%E6%B3%A2%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/","year":"2017"},{"content":" 前言 计划上这是3D打印系列的最后一篇了，不过之后可能还会再水一篇关于模型和支撑以及一些使用心得的番外。\n言归正传，事实上，不论成型原理，目前3D打印的主力耗材依然是高分子聚合物，也就是所谓的塑料。塑料虽说是21世纪最普遍应用的材料，但是塑料的主要加工方式（注塑，挤压，浇铸等）基本上都是依赖模具的，只适合规模化生产。而创客的作品往往都是产品原型，不需要成批生产。3D打印的普及恰好解决了这一痛点，让创客得以方便的使用塑料这一材料自由的制作出自己想要的结构，这也是我一直以来对3D打印抱有如此高评价的原因。很多时候，你的原型与真正拿得出手的产品之间只差一个高度定制的外壳。\n接下来简单说一说3D打印耗材。需要说明的是，一直以来我的介绍都侧重于桌面级或者DIY这类机型，因此这篇也不例外，分FDM耗材和DLP耗材两部分，至于更高端的SLS……呵呵（别问，问就是穷）\nFDM机型耗材 FDM机型所使用的耗材通常称作料丝（filament），顾名思义，就是很长的线径均匀的固体丝状塑料，像电线一样盘成一卷。直径分为1.75mm和3mm两种。材质通常是聚乳酸(PLA)、丙烯腈-丁二烯-苯乙烯塑料(ABS)、丙烯腈-丙烯酸-苯乙烯(ASA)、聚酰胺(PA)、改性聚碳酸酯(PC)、热塑性聚氨酯(TPU)、聚丁二醇对苯二甲酸酯(PBT)、聚乙二醇对苯二甲酸酯(PET)、聚丙烯(PP)、聚乙烯缩丁醛酯(PVB)、聚乙烯醇(PVA)、高抗冲聚苯乙烯(HIPS)以及聚己内酯(PCL)。下面会针对各种材料详细介绍。 但是在此之前，先解释一下几个小问题。由于上述材料都是塑料，生产过程中势必会添加各种添加剂，我所列的加热温度仅供参考，以你购买的耗材说明为准。此外下文提到的“力学性能”含义相当宽泛，工程上的力学性能实际上是涉及到强度韧性塑性硬度等多项技术指标的复杂概念，毕竟民用机打印个塑料部件也结实不到哪去，所以力学性能一词仅供参考。此外各种耗材泛用性都很强，也就是什么都能打，但是由于材料特性在打印某些零部件时会有更好的表现，请不要误解为该耗材只能打印xxx。\n另外，除了塑料，FDM还可以打印蜡丝，不过这个真的太少见了所以不介绍了。　PLA 聚乳酸 最常用的耗材，没有之一。通常用玉米/甘蔗提取物生产，可生物降解，因此十分环保而且价格低廉，打印时也没有异味。打印温度为190℃-220℃，除了PCL之外在所有FDM耗材里温度最低，同时热膨胀率也比较低，无需热床也不需要担心翘边，因此和价格低廉的入门级开放式打印机可谓是相得益彰，同时也是超大型打印的唯一指定耗材。此外虽说定位是入门级耗材，成型质量却相当优秀，层与层之间粘接紧密，层纹相对不那么明显（得益于熔化后较为粘稠的物理特性），同时耗材内会掺杂各种东西以实现不同的质感，例如仿丝绸，仿木，仿陶瓷，仿金属耗材的基材都是PLA，打印温度范围也完全相同。\n但是恰恰因为熔化后较为粘稠，极易在喷头内腔附着和延展，PLA耗材极易造成堵头这类问题，此外PLA的各项力学性能都相对较差，因此不适合打印承重部件。\nABS 丙烯腈-丁二烯-苯乙烯塑料 目前第二常用的耗材，同时在3D打印领域拥有悠久的历史，也是最先应用于工业3D打印的材料之一。ABS还是销量最大的热塑性工程塑料，作为适合工程使用的塑料，ABS拥有相当出众的力学性能，韧性和抗冲击性都非常优秀，尤其适合用来做桁架这类承重结构，耐磨性也比较好，而且价格也相对较低。打印温度为210℃-250℃，比PLA高不了多少，但是热膨胀率较高，因此必须配备热床，如果打印机有封闭外壳用来保温效果会更好，但是要配备换气风扇，因为ABS耗材加热后会产生刺激性气味。此外ABS熔化后不像PLA那样会糊成一滩，因此打印顺畅不易堵头，但是层间粘接性也相应的比较差，层纹较为明显，打印后需要额外打磨抛光才能获得表面质量说得过去的打印件。\n还有一点蛮有意思的是ABS是工业上最常用的电镀塑料（实际上包括下文提到的大多数塑料都可以电镀），电镀容易且镀层牢固，有条件的玩家可以电镀一下以获得金属外观。\nASA 丙烯腈-苯乙烯-丙烯酸塑料 从这开始往后都是相对不那么常见的耗材了，毕竟PLA和ABS已经可以满足绝大多数业余玩家的需求。之所以把ASA放到这是因为它和ABS组分很接近，只是把丁二烯替换成了丙烯酸橡胶。因此ASA的打印方法和力学特性和ABS差不多（温度稍高，在235℃-260℃），区别在于ASA耐候性极强，可以抵御紫外线、风化、氧化等多种侵蚀，抗老化性能十倍于ABS，因此很适合打印各种外壳，或是长期驻留室外的东西（例如个人气象站）。\nPA 聚酰胺 此物有一个更通俗的名字叫尼龙，打印温度高达230℃-270℃，需要热床，各项力学性能都比较优良的基础上抗冲击性和耐磨性更为突出，再加上表面光滑这一特性，尼龙非常适合打印齿轮凸轮蜗轮蜗杆这类零部件，虽然受限于打印机精度无法打印轴承，但是由于摩擦系数较小，直接打印无轴承铰链也是可以的。\nPC 聚碳酸酯 这里的PC和我们家用的PC可不是一个概念（笑），PC的打印温度在230℃-270℃，需要热床，层间粘接力相对较强，各项力学性能都很棒，可以看做ABS的等位替代（但是ABS便宜啊），最主要的是打印时不会有异味。此外PC耐热绝缘，很适合插头插座之类的家电DIY，耐弱酸弱碱可以用来打印盛液体的容器（含双酚A所以不能入口），但是不耐紫外线所以不要丢进紫外消毒柜消毒。\nTPU 聚氨酯 很有特色的耗材，因为TPU具有弹性，弹性较橡胶略弱，兼具耐磨性。由于弹性的存在，导致TPU只能使用近程挤出的方式打印，速度要放慢，且需要关闭料丝回抽功能，不能打印很高的物品（因为上部会晃动）。打印温度为190℃-210℃，本身有弹性无需热床。适合打轮胎之类的弹性体，但是需要注意的是不适合打弹簧，因为弹簧的弹性并不是来自于材料的弹性。\nPBT 聚丁二醇对苯二甲酸酯 著名键帽材料，然而实际上PBT的特性是耐150℃高温，可于140℃下长期工作，具备优良的韧性，抗疲劳性，自润滑性，而且摩擦系数较低。由于是结晶型塑料，所以打印温度区间较窄，在230℃-240℃。不太容易翘边，加不加热床都可以，大件的话最好加一下。\nPET 聚对苯二甲酸乙二酯 把楼上的丁二醇组分换成乙二醇，就得到了PET，然而特性大不相同。ABS上位替代，综合性能接近ABS，但是具备更好的韧性和耐候性。打印温度230℃-260℃。\nPETG 改性聚对苯二甲酸乙二酯 比楼上组分多了1,4-环己烷二甲醇，因此特性也大不相同。韧性和抗冲击性比楼上还要好，具备柔性，表面光泽度也高，因此适合打印一些柔性机械。不过最大的特点是耐酸碱并且满足食品标准，能打印水杯之类的（其他耗材做得到吗！）。应当注意的是，耗材通常都会有添加剂，原则上不建议3D打印制品入口，除非耗材本身表明打印产物可与食品接触。\nPP 聚丙烯 抱歉，在下真的做得到（捂住楼上的嘴）。PP的特点是高韧性和高耐磨，而且满足食品标准，同样适合制作水杯，但是熔点仅有165℃，因此不能用盛放炒菜炸鸡之类的高温食物。不过我之前买的PP耗材打印温度为220℃-250℃，推测是添加了其他成分。应当注意的是，耗材通常都会有添加剂，原则上不建议3D打印制品入口，除非耗材本身表明打印产物可与食品接触。（你没看错，从楼上一字不差复制的）。\nPVB 聚乙烯缩丁醛酯 非常少见的耗材，特点是抛光后blingbling很亮，非常适合用来打印秃头（雾）。打印温度在190℃-220℃，不易翘曲因此无需热床，不过软化温度只有65℃左右，耐热性极差。\nPVA 聚乙烯醇 大名鼎鼎的水溶性耗材，除了可以溶于水之外没什么特别的，工业上用途还挺多，但是3D打印领域通常用于打印支撑结构方便去除。\nHIPS 高抗冲聚苯乙烯 和楼上差不多，也用于可溶性支撑，不过不溶于水而是溶于柠檬烯，各项特性和打印条件都和ABS差不多，因此通常和ABS一起使用，热膨胀率很低，不易翘边。\nPCL 聚己内酯 把它归为3D打印耗材其实有些牵强，因为PCL通常用作3D打印笔的耗材，主要原因是PCL的打印温度极低，仅有80℃-120℃。如此低的温度自然也不需要热床了，其他没什么特别的，反正一般也不会用到。\nSLA/DLP耗材 反正你们也用不到，先鸽为敬！（咕咕咕）\n完结撒花！ ","id":9,"section":"posts","summary":"前言 计划上这是3D打印系列的最后一篇了，不过之后可能还会再水一篇关于模型和支撑以及一些使用心得的番外。 言归正传，事实上，不论成型原理，目前3","tags":["3D打印"],"title":"常见3D打印耗材","uri":"https://mechmallow.github.io/mechmallow/2017/02/003%E5%B8%B8%E8%A7%813d%E6%89%93%E5%8D%B0%E8%80%97%E6%9D%90/","year":"2017"},{"content":" 前言 在上一篇中简单说了一下3D打印机的原理，这一篇就介绍一下相对主流的3D打印机的结构。提前说明，价格昂贵难以DIY的SLS机型这里不会涉及，只讲FDM和DLP机型。（实在懒得配图了，你们自己搜关键词找图吧）\nFDM机型简介 挤出机构 FDM作为目前最为主流的3D打印机，只考虑机械结构的话基本可以分成两部分，运动机构和挤出机构。先谈挤出机构，因为挤出机构最为简单，视挤出电机的位置分为两类————近程挤出和远程挤出。\n近程挤出的电机与喷头距离很近，因此可以打印柔性耗材。此外挤出力也较大，可以使用线径较粗的耗材，效率较高。但是缺陷也很明显，那就是挤出电机和喷头作为一个整体惯性较大，在开环控制下，贸然调高速度很容易使运动机构丢步造成打印失败。而闭环方案由于电机和加速度传感器相对昂贵，加上控制程序很难写，所以相对少见。\n远程挤出则相反，挤出电机固定在机架上，耗材穿过一根弹性管通入喷头。优点在于喷头很轻，惯性较小，很容易实现高速打印。缺点则是挤出力经过漫长管道摩擦会有一定损耗，随着管道形变，挤出力也会有波动，稳定性稍差，且无法打印柔性耗材。\n运动机构 顾名思义，运动机构负责使打印平台/喷头运动至合适的位置。上一篇提到过，3D打印机的实质是一台数控机床，涉及到XYZ三轴的运动，因此我们就从这个角度来进行分类。\n按照XYZ三轴的运动是否孤立分为孤立型和耦合型。孤立型的定义是三轴各由独立的电机进行驱动。而耦合型则是至少有两轴的运动是共同由同一组电机进行驱动的。按照顺序，先谈孤立型。（下文的代号是我瞎起的）\ni3结构 i3作为孤立型的典范，脱胎于工业上的龙门铣床。特点是有一个龙门架负责Z轴和X轴方向上的运动，而平台则负责Y轴运动。\n随着机型的小型化，龙门逐渐演变成单悬臂，也就是如今的小鲁班的结构。\ni3结构是成本最低廉的，由于平台不是在Z轴上，调校也较为容易。但也正是由于平台水平移动导致空间利用率低，以及XY轴负载并不相同，对于强迫症来说可能难以接受。\nUtimaker结构 之所以称之为Utimaker结构是因为Utimaker的机子普遍采用这一结构。结构特点是平台在Z轴，两根正交滑杆分别在X轴和Y轴运动，其交点处为喷头。\n该结构相对复杂，调校较为困难，但调校得当可以说是同步带驱动中精度最高的机型。值得一提的是，由于XY轴孤立，当斜向运行时，速度会提高而精度则会降低。\nCore-XY与H-Bot结构 Core-XY与H-Bot结构则是耦合型中不得不提的结构，H-Bot是Core-XY的变体。二者的特点是两个电机共同驱动一根同步带实现XY轴的运动，平台在Z轴运动。\n该结构远比Utimaker结构简单，也相对易于调校，可以说是中等成本DIY的首选结构。唯一的缺陷是由于同步带弹性形变，无法把打印机做的很大。\nDelta结构 Delta在国内又被称作三角洲，脱胎自工业中的并联臂结构。特点是平台完全固定，三个电机控制三根并联臂，并联臂交汇处为喷头。唯一的固定平台的结构形式，成本之低廉已经赶超了龙门i3。\n精度与球关节的质量和电机滑轨直接挂钩，因此向来参差不齐（好处也有，基本无需调校）。\n不过本身结构非常有特点，极具观赏性。此外由于Delta通常搭配远程挤出，喷头速度很快却又不会抖，可以完成无支撑搭桥这种高端操作。\nDLP机型 由于激光振镜价格极为高昂，可DIY的光固化打印机基本上只剩下了基于DLP投影仪的魔改型。虽然光固化打印机只有一个液缸和升降平台，实际上却有正置与倒置两种结构。\n正置（自下而上）结构 正置结构是早期的光固化打印机普遍采用的结构，现在已经逐渐淘汰了（除了部分SLA机型）。\n打印时平台从液缸表面沉入液缸，紫外光从液缸上方向液面照射，模型自下而上打印。因此模型最大高度取决于液缸深度。\n优点是对液缸没什么要求，也很容易做的很大。缺陷也很明显，打印一次就需要一缸树脂（无论模型大小），很浪费（树脂不能长时间放置在液缸里）。所以民用机很少采用这种结构了，工业机可能还在用。\n倒置（自上而下）结构 现在民用级光固化打印机的主流结构，也常见于diy机型。平台倒置，平面朝下，从液缸底部开始逐渐上升，紫外光从缸底向上照射，模型自上向下打印。\n要求液缸底部极其平整且需要涂敷不粘涂层，打印的最高高度与液缸深度无关，只与平台行程有关。此外打印时只需要缸底有一层树脂即可，可以边打印边添加树脂。便捷性和经济性都远高于正置结构。\n结语 到此为止，完结撒花！\n","id":10,"section":"posts","summary":"前言 在上一篇中简单说了一下3D打印机的原理，这一篇就介绍一下相对主流的3D打印机的结构。提前说明，价格昂贵难以DIY的SLS机型这里不会涉及","tags":["3D打印"],"title":"主流3D打印机结构","uri":"https://mechmallow.github.io/mechmallow/2016/11/002%E4%B8%BB%E6%B5%813d%E6%89%93%E5%8D%B0%E6%9C%BA%E7%BB%93%E6%9E%84/","year":"2016"},{"content":" 前言 前段时间组了一台3D打印机。意外的发现尽管3D打印已经吹了这么多年，大多数人（即使是创客）对它也鲜有清晰的概念和认知。所以随手写这么一篇水文科普一下。毕竟咱不是文科出身，文笔不好多多包涵。\n什么是3D打印技术？ 随着近几年（十几年？）媒体和业界的大力吹捧，3D打印这一技术被冠以无数的光环和美誉。什么“第三次工业革命的标志啦”“颠覆性的制造技术啦”“工业4.0时代最具发展前景的制造技术之一啦”“高端装备制造行业的关键环节啦”，乍一听挺牛逼挺唬人的，可是说到底，只是和传统工业的“车铣刨磨”相类似的一种制造技术罢了，没必要神化。\n言归正传,3D打印技术是一种通过逐层堆积的方式来构造物体的快速成型制造技术，也是增材制造技术的主要表现方式。前半句似乎不太好懂，先来看后半句的“增材制造”。顾名思义，是通过增加材料实现制造的一种方式，就像堆雪人一样，把雪这一材料堆积在一起从而制造出雪人。增材的对立面自然是减材，就是从整块的物料上以车铣刨磨等各种方式减掉不需要的部分从而得到最终产品。这样一来，前半句的逐层打印就很好理解了，普通打印机是把线堆积成面从而形成图像，3D打印则是把面（层）堆积成实体。\n同样类比于普通打印，把文本文件替换成数字模型文件，把纸替换成打印平台，把墨盒替换成3D打印耗材，我们就实现了3D打印。继续类比，普通打印机有三个动作，进纸（y轴）、喷头移动（X轴）和喷墨（物料输送），3D打印机也只不过在此基础之上多了一个z轴而已。\n3D打印是不是什么都能打？ 并不是。首先3D打印的产物是实体，因此只有封闭模型才能被打印，一些场景模型和扫描模型是非封闭的，需要补面封闭后才能打印。由于3D打印是逐层进行的，因此当模型有悬空部分时，需要在下面打印疏松的支撑结构，而支撑位于封闭或半封闭空间的时候很难去除（比如鸟笼里鸟梁架的支撑），因此这类模型是无法打印的。由于材料强度限制，具有薄壁特征或是较细的柱状结构的模型也是难以打印的，强行打印也会在拆除支撑时不慎损毁薄壁和细柱。除此以外，由于热胀冷缩效应会导致层与层之间产生内应力，大面积的平面会极易出现翘边，即使有热床也很难避免，因此大面积板件不推荐打印而是直接切割。也正是内应力的存在，会导致层与层之间的结合相对不那么牢固可靠，大大降低法向的抗拉强度，同样一根立柱，竖放与横放打印出来的强度会有明显差异。\n相对应的，3D打印也有独到优势。首先3D打印很擅长“螺蛳壳里做道场”，即在封闭或半封闭空间内打印相对复杂的结构。\n其次，由于独特的成型原理，3D打印可以很轻松的制造复杂曲面（例如涡轮叶片）。同时，合理利用支撑可以打印免装配的可动零件。另一方面由于模型即产物的特点，3D打印很适合原型开发，可以让机械零件像代码一样快速迭代，缩短开发周期。\n怎么实现3D打印？ 正如前文提到的，3D打印的本质是逐层堆积，而逐层堆积的实现方式/原理有很多种。但是随着时间的检验，真正得以大规模应用的只有一部分，这里懒君就介绍几种比较主流的，分别是FDM（Fused Deposition Modeling，熔融沉积），SLA（Stereolithography，立体印刷术），SLS（Selective Laser Sintering，选择性激光烧结）。\n首先是FDM，我们继续用类比来理解。普通打印的耗材是墨汁，因为墨汁可以流动从而方便输送，也很容易和纸张（以及上面已有的墨迹）结合。而FDM打印机的耗材一般是塑料，而塑料是固体，因此需要多一个熔融的步骤使其变成流体，从而进行打印。也正是由于和普通打印机相类似的原理，FDM打印机是成本最低精度最低速度最慢同时也是民间最普及的（也是最适合萌新学习的）。这里值得一提的是，由于缺乏详细说明，很多人都觉得只要是能熔化的材料都可以采用FDM方式打印。事实上这里的熔融的潜台词就是要求耗材是非晶体，因为非晶体没有固定熔点，才能以一个相对粘稠的临界态进行打印。而晶体（例如很多沙雕群友脑补的焊锡），只有固态/液态，因此无法采用FDM方式打印。那么是不是FDM就无法打印金属了呢？当然不是，金属粉末与粘接剂混合制成的耗材是可以通过FDM方式打印的哟（想不到吧）！\n然后是SLA，由于它的耗材是光敏树脂，因此又被称作光固化技术。SLA的原理是通过一束激光扫描或是DLP（Digital Light Processing，数字光处理）投射的紫外光从而使目标区域的光敏树脂凝固，逐层进行从而实现3D打印。由于结构相对简单，仅包含数字光源（激光振镜组或是DMD微镜+透镜组），材料池和升降平台，成型速度快（想象一下硒鼓打印和喷墨打印的区别），精度高（主要取决于光源精度），因此也是最先工业化的。由于数字光源成本高昂加之光敏树脂具有一定的毒性，SLA打印机普及度相对较低，但是由于DLP技术广泛应用于投影仪，因此采用廉价投影仪更换紫外光源的DIY光固化打印机也深受创客欢迎。\n最后就是SLS，唯一支持金属直接打印的方案，也是唯一无需打印支撑结构的方案，真正配得上工业革命这一称号的终极方案。耗材通常为陶瓷粉末，金属粉末和高分子粉末。事实上从选择性激光烧结这一命名，就可以推断出它的原理是通过激光产生高温，选择性的烧结目标区域的耗材粉末，逐层铺洒压实粉末并进行烧结最终得到实体。在这一过程中粉末替代了支撑结构因此无需支撑。这一技术的最大优势是无需模具就可以直接制造出表面粗糙度较好、尺寸精度较高和致密性接近100%，具有冶金性质的金属零件，再加上前文提到的3D打印的固有优势，SLS很适合用于航空航天这种非量产场合。\n结语 能说的都说的差不多了，以上基本就是3D打印的所有理论知识，至于打印机架构和建模，之后会出视频或者文章详细说。（提前咕咕咕）\n完结撒花！\n","id":11,"section":"posts","summary":"前言 前段时间组了一台3D打印机。意外的发现尽管3D打印已经吹了这么多年，大多数人（即使是创客）对它也鲜有清晰的概念和认知。所以随手写这么一篇","tags":["3D打印"],"title":"3D打印技术简介","uri":"https://mechmallow.github.io/mechmallow/2016/11/001%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B3d%E6%89%93%E5%8D%B0/","year":"2016"},{"content":" 前言 首先明确一下Hugo是什么。\nHugo是一个用Go语言编写的静态站点生成器，具有丰富的主题和极快的的生成速度。在下就是因为用Hexo觉得越来越慢（主要是水的文章太多了），所以转投Hugo试试水。就目前的体验来看，可以说是一流的。这里照例水一遍搭建流程（其实基本上是照抄一遍官网流程hhh）。\n安装Hugo需要的前置技能如下：基础cmd命令、Markdown语法、基础git命令以及一个github账号。\nP.S. 本教程仅针对Windows用户，Mac用户请移步Hugo官网。\n安装Hugo Hugo提供两种安装方式，最简单易用的方法是直接下载二进制文件进行安装。\n方便起见，建议将下载的Hugo压缩包解压至C盘根目录，强迫症可以安装至其他目录，甚至还可以把hugo.exe添加到PATH，具体操作流程懒得写了，请移步百度经验。\n安装过程到此结束（没错只需要解压就完事了）。\n高端玩家可以下载源码自行编译，此处不赘述。（其实是我菜懒）。\n在命令行下运行Hugo 手速快的玩家可能已经双击hugo.exe了，然而什么都没有发生（因为Hugo是没有图形化界面的）。\nHugo的正确食用方式如下，首先win+R，然后输入cmd并敲击Enter，这时就进入了装b的命令行界面。\n使用cd命令定位到Hugo的解压目录，如果解压到了C盘根目录，直接输入\n$ cd ..  重复多次即可。\n这个时候就可以使用 hugo 指令了。请尝试一下\n$ hugo version  看看会发生什么。\n生成新站点 命令行下输入\n$ hugo new site 站点名称  站点名称随便起，但是不要出现汉字（我写汉字是为了照顾小白）。 这时候hugo会自动建立一个新的文件夹，文件夹名称与之前的站点名称相同。\n然后就完事了（并不）。\n生成第一篇水文博文 没有内容的Blog莫得灵魂，所以多多少少水一篇文章先。\n命令行下输入（水六个字不算水）\n$ hugo new post/first.md  然后在Windows的文件管理器里进入post目录，打开first.md。这个时候你会看到\n--- date: \u0026quot;2015-10-25T08:36:54-07:00\u0026quot; title: \u0026quot;first\u0026quot; draft = true ---  在分割线下面随便写点什么，比如Fuck me! Hello world! 之类的，然后把draft的值改成false（true代表这是草稿，不会进行渲染）。然后你的第一篇博文就会变成这个亚子。\n--- date: \u0026quot;2015-10-25T08:36:54-07:00\u0026quot; title: \u0026quot;first\u0026quot; draft = false --- # Hello world!  那个 # 号会让你看起来更大（不要忘了空格）。\n挑一个顺眼的主题 Hugo提供了很多主题，从这些里挑一个你喜欢的，然后在你的/theme目录下clone到本地。（以hyde为例，并不是因为我喜欢hyde，只是官方教程用的就是hyde，懒得改了，事实上我自己用的是minimo）\n$ cd themes $ git clone https://github.com/spf13/hyde.git  如果报错可能是没有装git，在这下载。下载后直接运行，安装过程中勾选“添加到PATH”即可，顺便推荐一下git教程。\n然后修改一下主题（懒的话可以跳过），使用文本编辑器打开config.toml，看的懂的话就把其中的某些值改动一下，看不懂我也懒得告诉你（来打我呀！）\n本地调试 在站点根目录下输入\n$ hugo server --theme=hyde --buildDrafts  如果没有报错的话，在浏览器（隆重推荐新版Edge）地址栏输入http://localhost:1313 （命令行会显示端口号，不一定是1313）就可以预览你的博客了。\n尾声 至此，hugo的部分就结束了，毕竟hugo只是个生成器，如果你希望别人可以在公网访问你的博客，那么需要把这个站点部署到服务器上。\n本来部署网站是一个相对繁琐的过程，但是感谢伟大的github，提供了[github pages]()这样一个简单快速的部署静态网页的渠道。\n快速部署 想不到吧，后面还有。 （当你以为我要太监的时候，我不仅又挤了一段，甚至还用上了大标题）\n首先登录github账户，创建一个新的Repository，命名为：name.github.io （name替换为你的github用户名）。 然后，回到命令行下，生成最终页面\n$ hugo --theme=hyde --baseUrl=\u0026quot;http:/name.github.io/\u0026quot;  如果一切顺利，所有静态页面都会生成到public目录下，只需要push到刚刚新建的Repo就可以了。 接下来就是一顿操作猛如虎\n$ cd public $ git init $ git remote add origin https://github.com/name/name.github.io.git $ git add -A $ git commit -m \u0026quot;first commit\u0026quot; $ git push -u origin master  打开浏览器，访问 http://name.github.io/ 即可\n完结撒花！\n","id":12,"section":"posts","summary":"前言 首先明确一下Hugo是什么。 Hugo是一个用Go语言编写的静态站点生成器，具有丰富的主题和极快的的生成速度。在下就是因为用Hexo觉得越","tags":["hugo"],"title":"使用Hugo快速搭建博客","uri":"https://mechmallow.github.io/mechmallow/2016/09/000%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","year":"2016"}],"tags":[{"title":"3D打印","uri":"https://mechmallow.github.io/mechmallow/tags/3d%E6%89%93%E5%8D%B0/"},{"title":"Geek","uri":"https://mechmallow.github.io/mechmallow/tags/geek/"},{"title":"hugo","uri":"https://mechmallow.github.io/mechmallow/tags/hugo/"},{"title":"NFC","uri":"https://mechmallow.github.io/mechmallow/tags/nfc/"},{"title":"人生迷思","uri":"https://mechmallow.github.io/mechmallow/tags/%E4%BA%BA%E7%94%9F%E8%BF%B7%E6%80%9D/"},{"title":"效率工具","uri":"https://mechmallow.github.io/mechmallow/tags/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"},{"title":"算法","uri":"https://mechmallow.github.io/mechmallow/tags/%E7%AE%97%E6%B3%95/"},{"title":"键盘","uri":"https://mechmallow.github.io/mechmallow/tags/%E9%94%AE%E7%9B%98/"}]}